import math
def connected(V,G):
    for i,weight in enumerate(G[V]):# позволяет получить индекс эл-та и его знач
        if weight>0:
          yield i

def minn(strin,X):
    min0=-1
    m=max(strin)
    for i, x in enumerate(strin):
        if x<m and i not in X:
            m=x
            min0=i
    return min0
G=((0,7,0,0,9,2,0,0,0,0,0,0),
   (7,0,5,4,8,2,0,0,0,0,0,0),
   (0,5,0,2,9,0,0,0,0,0,0,0),
   (0,4,2,0,3,0,8,3,0,0,0,0),
   (9,8,9,3,0,3,5,1,7,0,0,0),
   (2,2,0,0,3,0,0,6,1,0,0,0),
   (0,0,0,8,5,0,0,6,0,4,4,0),
   (0,0,0,3,1,6,6,0,2,7,8,5),
   (0,0,0,0,7,1,0,2,0,0,6,1),
   (0,0,0,0,0,0,4,7,0,0,10,0),
   (0,0,0,0,0,0,4,8,6,10,0,3),
   (0,0,0,0,0,0,0,5,1,0,3,0))

N=len(G)#число вершин в графе
strin= [math.inf]*N # строка с бесконечностями
V=0 # нач вершина
X={V} # уже пройденные вершины
strin[V]=0
weight2=0
while V!=-1:
    for k in connected(V,G):
        if k not in X:
            w= strin[V]+G[V][k]
            if w<strin[k]:
                strin[k]=w
    V=minn(strin,X)
    if V>0:
        X.add(V)

print(strin)





''' edges = [ 
        ("1", "2", 7),
        ("1", "5", 9),
        ("1", "6", 2),
        ("2", "3", 5),
        ("2", "4", 4),
        ("2", "6", 2),
        ("2", "5", 8),
        ("3", "4", 2),
        ("3", "5", 9),
        ("4", "5", 3),
        ("4", "7", 8),
        ("4", "8", 3),
        ("5", "8", 1),
        ("5", "9", 7),
        ("5", "6", 3),
        ("5", "7", 5),
        ("6", "8", 6),
        ("6", "9", 1),
        ("7", "8", 6),
        ("7", "10", 4),
        ("7", "11", 4),
        ("8", "9", 2),
        ("8", "10", 7),
        ("8", "11", 8),
        ("8", "12", 5),
        ("9", "11", 6),
        ("9", "12", 1),
        ("10", "11", 10),
        ("11", "12", 3)
]'''




